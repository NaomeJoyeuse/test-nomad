function cov_2j6n9ux6uw(){var path="N:\\Personal Projects\\The Talent\\test-nomad\\src\\routes\\userRoutes.js";var hash="3d01faf5ce418390ab6bd5f7fc989058dcc70a83";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"N:\\Personal Projects\\The Talent\\test-nomad\\src\\routes\\userRoutes.js",statementMap:{"0":{start:{line:1,column:16},end:{line:1,column:34}},"1":{start:{line:4,column:4},end:{line:4,column:59}},"2":{start:{line:7,column:4},end:{line:7,column:60}},"3":{start:{line:8,column:15},end:{line:8,column:31}},"4":{start:{line:9,column:0},end:{line:9,column:58}},"5":{start:{line:54,column:0},end:{line:54,column:48}},"6":{start:{line:55,column:0},end:{line:55,column:24}}},fnMap:{},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},f:{},b:{},inputSourceMap:{version:3,names:["express","require","userRegistrationController","userLoginController","router","Router","post","module","exports"],sourceRoot:"N:\\Personal Projects\\The Talent\\test-nomad\\src\\routes\\",sources:["userRoutes.js"],sourcesContent:["const express = require('express');\r\nconst { userRegistrationController } = require('../controllers/UserController/userController');\r\nconst { userLoginController } = require('../controllers/UserController/LoginController');\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post('/auth/register', userRegistrationController);\r\n/**\r\n * @openapi\r\n * /api/auth/login:\r\n *   post:\r\n *     tags:\r\n *       - Users\r\n *     description: Login a user and return a JWT token\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               email:\r\n *                 type: string\r\n *                 format: email\r\n *                 example: user@example.com\r\n *               password:\r\n *                 type: string\r\n *                 format: password\r\n *                 example: mysecurepassword\r\n *             required:\r\n *               - email\r\n *               - password\r\n *     responses:\r\n *       '201':\r\n *         description: Login successful\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 message:\r\n *                   type: string\r\n *                   example: Login successful\r\n *                 token:\r\n *                   type: string\r\n *                   example: eyJhbGciOiJIUzI1NiIsIn...\r\n *       '401':\r\n *         description: Authentication failed - Invalid credentials\r\n *       '500':\r\n *         description: Internal server error\r\n */\r\nrouter.post('/auth/login', userLoginController);\r\n\r\nmodule.exports = router;\r\n"],mappings:"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAM;EAAEC;AAA2B,CAAC,GAAGD,OAAO,CAAC,8CAA8C,CAAC;AAC9F,MAAM;EAAEE;AAAoB,CAAC,GAAGF,OAAO,CAAC,+CAA+C,CAAC;AAExF,MAAMG,MAAM,GAAGJ,OAAO,CAACK,MAAM,CAAC,CAAC;AAE/BD,MAAM,CAACE,IAAI,CAAC,gBAAgB,EAAEJ,0BAA0B,CAAC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAE,MAAM,CAACE,IAAI,CAAC,aAAa,EAAEH,mBAAmB,CAAC;AAE/CI,MAAM,CAACC,OAAO,GAAGJ,MAAM",ignoreList:[]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"3d01faf5ce418390ab6bd5f7fc989058dcc70a83"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2j6n9ux6uw=function(){return actualCoverage;};}return actualCoverage;}cov_2j6n9ux6uw();const express=(cov_2j6n9ux6uw().s[0]++,require('express'));const{userRegistrationController}=(cov_2j6n9ux6uw().s[1]++,require('../controllers/UserController/userController'));const{userLoginController}=(cov_2j6n9ux6uw().s[2]++,require('../controllers/UserController/LoginController'));const router=(cov_2j6n9ux6uw().s[3]++,express.Router());cov_2j6n9ux6uw().s[4]++;router.post('/auth/register',userRegistrationController);/**
 * @openapi
 * /api/auth/login:
 *   post:
 *     tags:
 *       - Users
 *     description: Login a user and return a JWT token
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               email:
 *                 type: string
 *                 format: email
 *                 example: user@example.com
 *               password:
 *                 type: string
 *                 format: password
 *                 example: mysecurepassword
 *             required:
 *               - email
 *               - password
 *     responses:
 *       '201':
 *         description: Login successful
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Login successful
 *                 token:
 *                   type: string
 *                   example: eyJhbGciOiJIUzI1NiIsIn...
 *       '401':
 *         description: Authentication failed - Invalid credentials
 *       '500':
 *         description: Internal server error
 */cov_2j6n9ux6uw().s[5]++;router.post('/auth/login',userLoginController);cov_2j6n9ux6uw().s[6]++;module.exports=router;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsInVzZXJSZWdpc3RyYXRpb25Db250cm9sbGVyIiwidXNlckxvZ2luQ29udHJvbGxlciIsInJvdXRlciIsIlJvdXRlciIsInBvc3QiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiJOOlxcUGVyc29uYWwgUHJvamVjdHNcXFRoZSBUYWxlbnRcXHRlc3Qtbm9tYWRcXHNyY1xccm91dGVzXFwiLCJzb3VyY2VzIjpbInVzZXJSb3V0ZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcclxuY29uc3QgeyB1c2VyUmVnaXN0cmF0aW9uQ29udHJvbGxlciB9ID0gcmVxdWlyZSgnLi4vY29udHJvbGxlcnMvVXNlckNvbnRyb2xsZXIvdXNlckNvbnRyb2xsZXInKTtcclxuY29uc3QgeyB1c2VyTG9naW5Db250cm9sbGVyIH0gPSByZXF1aXJlKCcuLi9jb250cm9sbGVycy9Vc2VyQ29udHJvbGxlci9Mb2dpbkNvbnRyb2xsZXInKTtcclxuXHJcbmNvbnN0IHJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XHJcblxyXG5yb3V0ZXIucG9zdCgnL2F1dGgvcmVnaXN0ZXInLCB1c2VyUmVnaXN0cmF0aW9uQ29udHJvbGxlcik7XHJcbi8qKlxyXG4gKiBAb3BlbmFwaVxyXG4gKiAvYXBpL2F1dGgvbG9naW46XHJcbiAqICAgcG9zdDpcclxuICogICAgIHRhZ3M6XHJcbiAqICAgICAgIC0gVXNlcnNcclxuICogICAgIGRlc2NyaXB0aW9uOiBMb2dpbiBhIHVzZXIgYW5kIHJldHVybiBhIEpXVCB0b2tlblxyXG4gKiAgICAgcmVxdWVzdEJvZHk6XHJcbiAqICAgICAgIHJlcXVpcmVkOiB0cnVlXHJcbiAqICAgICAgIGNvbnRlbnQ6XHJcbiAqICAgICAgICAgYXBwbGljYXRpb24vanNvbjpcclxuICogICAgICAgICAgIHNjaGVtYTpcclxuICogICAgICAgICAgICAgdHlwZTogb2JqZWN0XHJcbiAqICAgICAgICAgICAgIHByb3BlcnRpZXM6XHJcbiAqICAgICAgICAgICAgICAgZW1haWw6XHJcbiAqICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmdcclxuICogICAgICAgICAgICAgICAgIGZvcm1hdDogZW1haWxcclxuICogICAgICAgICAgICAgICAgIGV4YW1wbGU6IHVzZXJAZXhhbXBsZS5jb21cclxuICogICAgICAgICAgICAgICBwYXNzd29yZDpcclxuICogICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZ1xyXG4gKiAgICAgICAgICAgICAgICAgZm9ybWF0OiBwYXNzd29yZFxyXG4gKiAgICAgICAgICAgICAgICAgZXhhbXBsZTogbXlzZWN1cmVwYXNzd29yZFxyXG4gKiAgICAgICAgICAgICByZXF1aXJlZDpcclxuICogICAgICAgICAgICAgICAtIGVtYWlsXHJcbiAqICAgICAgICAgICAgICAgLSBwYXNzd29yZFxyXG4gKiAgICAgcmVzcG9uc2VzOlxyXG4gKiAgICAgICAnMjAxJzpcclxuICogICAgICAgICBkZXNjcmlwdGlvbjogTG9naW4gc3VjY2Vzc2Z1bFxyXG4gKiAgICAgICAgIGNvbnRlbnQ6XHJcbiAqICAgICAgICAgICBhcHBsaWNhdGlvbi9qc29uOlxyXG4gKiAgICAgICAgICAgICBzY2hlbWE6XHJcbiAqICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0XHJcbiAqICAgICAgICAgICAgICAgcHJvcGVydGllczpcclxuICogICAgICAgICAgICAgICAgIG1lc3NhZ2U6XHJcbiAqICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZ1xyXG4gKiAgICAgICAgICAgICAgICAgICBleGFtcGxlOiBMb2dpbiBzdWNjZXNzZnVsXHJcbiAqICAgICAgICAgICAgICAgICB0b2tlbjpcclxuICogICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nXHJcbiAqICAgICAgICAgICAgICAgICAgIGV4YW1wbGU6IGV5SmhiR2NpT2lKSVV6STFOaUlzSW4uLi5cclxuICogICAgICAgJzQwMSc6XHJcbiAqICAgICAgICAgZGVzY3JpcHRpb246IEF1dGhlbnRpY2F0aW9uIGZhaWxlZCAtIEludmFsaWQgY3JlZGVudGlhbHNcclxuICogICAgICAgJzUwMCc6XHJcbiAqICAgICAgICAgZGVzY3JpcHRpb246IEludGVybmFsIHNlcnZlciBlcnJvclxyXG4gKi9cclxucm91dGVyLnBvc3QoJy9hdXRoL2xvZ2luJywgdXNlckxvZ2luQ29udHJvbGxlcik7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHJvdXRlcjtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFDbEMsTUFBTTtFQUFFQztBQUEyQixDQUFDLEdBQUdELE9BQU8sQ0FBQyw4Q0FBOEMsQ0FBQztBQUM5RixNQUFNO0VBQUVFO0FBQW9CLENBQUMsR0FBR0YsT0FBTyxDQUFDLCtDQUErQyxDQUFDO0FBRXhGLE1BQU1HLE1BQU0sR0FBR0osT0FBTyxDQUFDSyxNQUFNLENBQUMsQ0FBQztBQUUvQkQsTUFBTSxDQUFDRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUVKLDBCQUEwQixDQUFDO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUUsTUFBTSxDQUFDRSxJQUFJLENBQUMsYUFBYSxFQUFFSCxtQkFBbUIsQ0FBQztBQUUvQ0ksTUFBTSxDQUFDQyxPQUFPLEdBQUdKLE1BQU0iLCJpZ25vcmVMaXN0IjpbXX0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMmo2bjl1eDZ1dyIsImFjdHVhbENvdmVyYWdlIiwiZXhwcmVzcyIsInMiLCJyZXF1aXJlIiwidXNlclJlZ2lzdHJhdGlvbkNvbnRyb2xsZXIiLCJ1c2VyTG9naW5Db250cm9sbGVyIiwicm91dGVyIiwiUm91dGVyIiwicG9zdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJOOlxcUGVyc29uYWwgUHJvamVjdHNcXFRoZSBUYWxlbnRcXHRlc3Qtbm9tYWRcXHNyY1xccm91dGVzXFwvdXNlclJvdXRlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xyXG5jb25zdCB7IHVzZXJSZWdpc3RyYXRpb25Db250cm9sbGVyIH0gPSByZXF1aXJlKCcuLi9jb250cm9sbGVycy9Vc2VyQ29udHJvbGxlci91c2VyQ29udHJvbGxlcicpO1xyXG5jb25zdCB7IHVzZXJMb2dpbkNvbnRyb2xsZXIgfSA9IHJlcXVpcmUoJy4uL2NvbnRyb2xsZXJzL1VzZXJDb250cm9sbGVyL0xvZ2luQ29udHJvbGxlcicpO1xyXG5cclxuY29uc3Qgcm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKTtcclxuXHJcbnJvdXRlci5wb3N0KCcvYXV0aC9yZWdpc3RlcicsIHVzZXJSZWdpc3RyYXRpb25Db250cm9sbGVyKTtcclxuLyoqXHJcbiAqIEBvcGVuYXBpXHJcbiAqIC9hcGkvYXV0aC9sb2dpbjpcclxuICogICBwb3N0OlxyXG4gKiAgICAgdGFnczpcclxuICogICAgICAgLSBVc2Vyc1xyXG4gKiAgICAgZGVzY3JpcHRpb246IExvZ2luIGEgdXNlciBhbmQgcmV0dXJuIGEgSldUIHRva2VuXHJcbiAqICAgICByZXF1ZXN0Qm9keTpcclxuICogICAgICAgcmVxdWlyZWQ6IHRydWVcclxuICogICAgICAgY29udGVudDpcclxuICogICAgICAgICBhcHBsaWNhdGlvbi9qc29uOlxyXG4gKiAgICAgICAgICAgc2NoZW1hOlxyXG4gKiAgICAgICAgICAgICB0eXBlOiBvYmplY3RcclxuICogICAgICAgICAgICAgcHJvcGVydGllczpcclxuICogICAgICAgICAgICAgICBlbWFpbDpcclxuICogICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZ1xyXG4gKiAgICAgICAgICAgICAgICAgZm9ybWF0OiBlbWFpbFxyXG4gKiAgICAgICAgICAgICAgICAgZXhhbXBsZTogdXNlckBleGFtcGxlLmNvbVxyXG4gKiAgICAgICAgICAgICAgIHBhc3N3b3JkOlxyXG4gKiAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nXHJcbiAqICAgICAgICAgICAgICAgICBmb3JtYXQ6IHBhc3N3b3JkXHJcbiAqICAgICAgICAgICAgICAgICBleGFtcGxlOiBteXNlY3VyZXBhc3N3b3JkXHJcbiAqICAgICAgICAgICAgIHJlcXVpcmVkOlxyXG4gKiAgICAgICAgICAgICAgIC0gZW1haWxcclxuICogICAgICAgICAgICAgICAtIHBhc3N3b3JkXHJcbiAqICAgICByZXNwb25zZXM6XHJcbiAqICAgICAgICcyMDEnOlxyXG4gKiAgICAgICAgIGRlc2NyaXB0aW9uOiBMb2dpbiBzdWNjZXNzZnVsXHJcbiAqICAgICAgICAgY29udGVudDpcclxuICogICAgICAgICAgIGFwcGxpY2F0aW9uL2pzb246XHJcbiAqICAgICAgICAgICAgIHNjaGVtYTpcclxuICogICAgICAgICAgICAgICB0eXBlOiBvYmplY3RcclxuICogICAgICAgICAgICAgICBwcm9wZXJ0aWVzOlxyXG4gKiAgICAgICAgICAgICAgICAgbWVzc2FnZTpcclxuICogICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nXHJcbiAqICAgICAgICAgICAgICAgICAgIGV4YW1wbGU6IExvZ2luIHN1Y2Nlc3NmdWxcclxuICogICAgICAgICAgICAgICAgIHRva2VuOlxyXG4gKiAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmdcclxuICogICAgICAgICAgICAgICAgICAgZXhhbXBsZTogZXlKaGJHY2lPaUpJVXpJMU5pSXNJbi4uLlxyXG4gKiAgICAgICAnNDAxJzpcclxuICogICAgICAgICBkZXNjcmlwdGlvbjogQXV0aGVudGljYXRpb24gZmFpbGVkIC0gSW52YWxpZCBjcmVkZW50aWFsc1xyXG4gKiAgICAgICAnNTAwJzpcclxuICogICAgICAgICBkZXNjcmlwdGlvbjogSW50ZXJuYWwgc2VydmVyIGVycm9yXHJcbiAqL1xyXG5yb3V0ZXIucG9zdCgnL2F1dGgvbG9naW4nLCB1c2VyTG9naW5Db250cm9sbGVyKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gcm91dGVyO1xyXG4iXSwibWFwcGluZ3MiOiJ1bkhBYUE7QUFBQUEsY0FBQSxTQUFBQSxDQUFBLFNBQUFDLGNBQUEsV0FBQUEsY0FBQSxFQUFBRCxjQUFBLEdBYkEsS0FBTSxDQUFBRSxPQUFPLEVBQUFGLGNBQUEsR0FBQUcsQ0FBQSxNQUFHQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQ2xDLEtBQU0sQ0FBRUMsMEJBQTJCLENBQUMsRUFBQUwsY0FBQSxHQUFBRyxDQUFBLE1BQUdDLE9BQU8sQ0FBQyw4Q0FBOEMsQ0FBQyxFQUM5RixLQUFNLENBQUVFLG1CQUFvQixDQUFDLEVBQUFOLGNBQUEsR0FBQUcsQ0FBQSxNQUFHQyxPQUFPLENBQUMsK0NBQStDLENBQUMsRUFFeEYsS0FBTSxDQUFBRyxNQUFNLEVBQUFQLGNBQUEsR0FBQUcsQ0FBQSxNQUFHRCxPQUFPLENBQUNNLE1BQU0sQ0FBQyxDQUFDLEVBQUFSLGNBQUEsR0FBQUcsQ0FBQSxNQUUvQkksTUFBTSxDQUFDRSxJQUFJLENBQUMsZ0JBQWdCLENBQUVKLDBCQUEwQixDQUFDLENBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0EzQ0FMLGNBQUEsR0FBQUcsQ0FBQSxNQTRDQUksTUFBTSxDQUFDRSxJQUFJLENBQUMsYUFBYSxDQUFFSCxtQkFBbUIsQ0FBQyxDQUFBTixjQUFBLEdBQUFHLENBQUEsTUFFL0NPLE1BQU0sQ0FBQ0MsT0FBTyxDQUFHSixNQUFNLEMiLCJpZ25vcmVMaXN0IjpbXX0=